import random
import subprocess

# Enhanced and elaborated mood-based explanations for Python topics
# Each explanation includes long descriptions, examples, and optional type breakdowns

topic_data = {
    "functions": {
        "happy": (
            "Functions in Python are like your best friends in coding—they make life easier, code cleaner, and work faster.\n"
            "You define a function once using 'def', give it a name, and specify parameters if needed.\n"
            "Whenever you need that functionality, just call the function with required arguments.\n"
            "Functions allow you to avoid repeating code, make debugging easier, and give your program a logical structure.\n"
            "It's like having your favorite coffee machine: press the button and it delivers every time, consistently and happily!"
        ),
        "curious": (
            "Functions are essential for abstraction and modular programming.\n"
            "They allow a programmer to decompose a problem into manageable parts.\n"
            "With parameters, default arguments, return values, and even variable scope, functions provide flexibility and precision.\n"
            "Python supports first-class functions, meaning you can pass them around as arguments, store them in data structures, or return them from other functions.\n"
            "This paves the way for functional programming styles alongside imperative ones."
        ),
        "funny": (
            "Functions in Python are like vending machines—feed them inputs (arguments), and they return goodies (outputs)!\n"
            "But forget your 'return' statement, and it just swallows your money without snacks.\n"
            "Want your code to be less of a mess? Wrap it in a function and stop the spaghetti from spilling!"
        )
    },

    "loops": {
        "happy": (
            "Loops bring rhythm to your code—they let you iterate, repeat, and automate tasks smoothly.\n"
            "A 'for' loop is ideal for traversing sequences like lists, tuples, strings, or ranges.\n"
            "A 'while' loop continues as long as a condition is true, making it flexible for uncertain repetition needs.\n"
            "Loops help reduce manual repetition, make your code compact and easier to read.\n"
            "Example:\n    for i in range(5):\n        print(i)\n\n    count = 0\n    while count < 5:\n        print(count)\n        count += 1"
        ),
        "curious": (
            "Loops are a core control structure.\n"
            "There are two main types in Python:\n    1. 'for' loop: Iterates over a sequence or any iterable.\n    2. 'while' loop: Repeats as long as a condition remains true.\n"
            "Enhancements include:\n    - 'break' to exit early\n    - 'continue' to skip the rest of the current iteration\n    - 'else' block for post-loop execution (if not broken early)\n"
            "Example:\n    for i in range(5):\n        if i == 3:\n            break\n        print(i)"
        ),
        "funny": (
            "Loops are like reruns of your favorite sitcom—you know what’s coming, but you love the flow.\n"
            "Forget the exit condition, and you’ve summoned an infinite loop demon!\n"
            "Loop responsibly: don’t let Python roast your CPU like marshmallows!"
        )
    },

    "lists": {
        "happy": (
            "Lists in Python are dynamic, ordered, and versatile collections.\n"
            "They let you store multiple items in one variable—like a backpack for your data.\n"
            "You can add, remove, sort, and access items easily.\n"
            "Example:\n    groceries = ['milk', 'bread', 'eggs']\n    groceries.append('butter')\n    print(groceries[1])  # bread"
        ),
        "curious": (
            "Lists are mutable sequences.\n"
            "You can modify, delete, or insert elements freely.\n"
            "They support slicing, iteration, negative indexing, and methods like:\n    - append(), insert(), remove(), pop(), reverse(), sort(), extend()\n"
            "They can store mixed data types or even other lists.\n"
            "Use cases: stacks, queues, grids, and temporary data buffers."
        ),
        "funny": (
            "Lists are like a buffet tray—you can toss in fries, ice cream, pickles, or nested trays!\n"
            "You never know what's in there unless you peek (or index).\n"
            "Just remember: Python lists count from 0, so your first love is at index 0, not 1!"
        )
    },

    "dictionaries": {
        "happy": (
            "Dictionaries let you organize information using a key-value format.\n"
            "It’s like a magic contact book: {'Alice': 1234, 'Bob': 5678}.\n"
            "You get instant access to a value by referencing its key.\n"
            "They’re fast, intuitive, and perfect for structured data.\n"
            "Example:\n    student_grades = {'John': 85, 'Emma': 92}\n    print(student_grades['Emma'])"
        ),
        "curious": (
            "Dictionaries are implemented as hash tables.\n"
            "They allow constant-time complexity for insertions and lookups.\n"
            "Keys must be immutable (e.g., strings, numbers, tuples), values can be any object.\n"
            "Useful methods: keys(), values(), items(), get(), pop(), update()\n"
            "Perfect for JSON data, mappings, counters, and dynamic lookup tables."
        ),
        "funny": (
            "Dictionaries are Python’s version of a know-it-all assistant.\n"
            "Ask for a value by key, and it instantly tells you.\n"
            "Lose the key? Good luck getting what you want—just like real life!"
        )
    },

    "exceptions": {
        "happy": (
            "Python exceptions handle errors gracefully.\n"
            "They help your code recover from problems instead of crashing.\n"
            "Use try, except, else, and finally to control flow.\n"
            "Example:\n    try:\n        x = 5 / 0\n    except ZeroDivisionError:\n        print('Oops! Division by zero.')\n    finally:\n        print('Done')"
        ),
        "curious": (
            "Exceptions are objects representing errors.\n"
            "They are part of a class hierarchy rooted in BaseException.\n"
            "Common ones include: ValueError, TypeError, FileNotFoundError, ZeroDivisionError.\n"
            "You can also define custom exceptions by subclassing Exception.\n"
            "Use specific except blocks for better debugging."
        ),
        "funny": (
            "Exceptions are Python’s polite way of screaming internally.\n"
            "Run into a bug? Throw a tantrum (aka an Exception), but keep it classy with try/except.\n"
            "Catch the error—or it’ll crash your show like an uninvited drama queen!"
        )
    }
}

def speak_text(text):
    safe_text = text.replace('"', '`"')
    script = f'''
    Add-Type -AssemblyName System.Speech
    $speak = New-Object System.Speech.Synthesis.SpeechSynthesizer
    $speak.Speak("{safe_text}")
    '''
    subprocess.run(["powershell", "-Command", script])

def run_topic_explainer():
    print("\n🧠 Mood-Based Python Topic Explainer")
    print("=" * 50)
    print("\n📚 Topics:")
    for topic in topic_data:
        print(" -", topic.capitalize())

    topic = input("\n🔍 Choose a topic: ").strip().lower()
    if topic not in topic_data:
        print("❌ Topic not found.")
        return

    mood = input("🙂 Enter your mood (happy, curious, funny): ").strip().lower()
    if mood not in topic_data[topic]:
        print("❌ Mood not supported.")
        return

    explanation = topic_data[topic][mood]
    print("\n✅ Explanation:\n")
    print(explanation)

    if input("\n🔊 Hear it aloud? (yes/no): ").strip().lower() == "yes":
        speak_text(explanation)

    print("\n✅ Done. Keep exploring!")

if __name__ == "__main__":
    run_topic_explainer()
